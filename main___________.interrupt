#include "stm8s.h"
#include "delay.h"

#define EV1527_PIN 	GPIO_PIN_3
#define EV1527_PORT GPIOC

#define LED_PORT	GPIOD
#define LED_PIN		GPIO_PIN_3


volatile uint32_t ev1527_data = 0;
volatile uint8_t bit_count = 0;
volatile uint8_t sync_detected = 0;
volatile uint16_t last_rise_time = 0;
volatile uint16_t last_fall_time = 0;
volatile uint8_t last_edge = 0; // 0 for rise, 1 for fall

void UART1_Setup(void) {
	UART1_DeInit();
	UART1_Init(9600, UART1_WORDLENGTH_8D, UART1_STOPBITS_1, UART1_PARITY_NO, UART1_SYNCMODE_CLOCK_DISABLE, UART1_MODE_TXRX_ENABLE);
}

void TIM2_Setup(void) {
	TIM2_DeInit();
	TIM2_TimeBaseInit(TIM2_PRESCALER_16, 0xFFFF);
	TIM2_ClearFlag(TIM2_FLAG_UPDATE);
	TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
	TIM2_Cmd(ENABLE);
}

void EXTI3_Setup(void) {
	EXTI_SetExtIntSensitivity(EXTI_PORT_GPIOC, EXTI_SENSITIVITY_RISE_FALL);
}

INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5) {
	uint16_t timer_value = TIM2_GetCounter();
	TIM2_SetCounter(0);

	if (GPIO_ReadInputPin(EV1527_PORT, EV1527_PIN) == RESET) {
		// Falling edge
		last_fall_time = timer_value;
		last_edge = 1;
	} else {
		// Rising edge
		last_rise_time = timer_value;
		last_edge = 0;
	}

	if (!sync_detected) 
	{
		// Check for sync bit (longer pulse)
		if (last_edge == 1 && (last_rise_time + last_fall_time) > 3000 && (last_rise_time + last_fall_time) < 5000) {
			sync_detected = 1;
			bit_count = 0;
			ev1527_data = 0;
			GPIO_WriteReverse(LED_PORT,LED_PIN);
		}
	} 
	else 
	{
		// Decode data bits
		if (last_edge == 1) {
			if (last_rise_time > last_fall_time) 
			{
				ev1527_data = (ev1527_data << 1) | 1;
			} else {
				ev1527_data = (ev1527_data << 1);
			}

			bit_count++;
			if (bit_count >= 24) 
			{
				uint8_t i;
				char buffer[10];
				sprintf(buffer, "%08lx\r\n", ev1527_data);
				for (i = 0; buffer[i] != '\0'; i++) {
					UART1_SendData8(buffer[i]);
					while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET);
				}
				bit_count = 0;
				ev1527_data = 0;
				sync_detected = 0;
			}
		}
	}
	// EXTI_ClearITPendingBit(EXTI_IT_Pin3);
}

INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13) {
	TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
}

void Serial_print_string (char string[])
 {
	char i=0;
	while (string[i] != 0x00)
	{
		UART1_SendData8(string[i]);
		while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET);
		i++;
	}
 }

 void Serial_newline(void)
 {
	UART1_SendData8(0x0a);
	while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET); //wait for sending
 }

 void Serial_print_int (uint16_t number) //Funtion to print int value to serial monitor
 {
	char count = 0;
	char digit[5] = "";         
	while (number != 0) //split the int to char array
	{
		digit[count] = number%10;
		count++;
		number = number/10;
	}


	while (count !=0) //print char array in correct direction
	{
		UART1_SendData8(digit[count-1] + 0x30);
		while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET); //wait for sending
		count--;
	}
 }

void UART_SendData(uint16_t *data, uint8_t length) {
    uint8_t i;
	for (i = 0; i < length; i++) {
		Serial_print_int(data[i]);
		Serial_print_string("-");
        // UART1_SendData8(data[i]+ 0x30); // ارسال هر بایت
        while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET); // منتظر پایان ارسال
    }
}

void GPIO_Setup(void)
{
	GPIO_DeInit(EV1527_PORT);
	GPIO_Init(EV1527_PORT,EV1527_PIN,GPIO_MODE_IN_FL_IT);

	GPIO_DeInit(GPIOD);
	GPIO_Init(LED_PORT, LED_PIN, GPIO_MODE_OUT_PP_LOW_SLOW);
}

void Clock_Setup(void)
{
      CLK_DeInit();
                
      CLK_HSECmd(DISABLE);
      CLK_LSICmd(DISABLE);
      CLK_HSICmd(ENABLE);
      while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
                
      CLK_ClockSwitchCmd(ENABLE);
	 
      CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1); // 16MHz / 1 = 16MHz
      CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
                
      CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, 
      DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);
            
}

void main(void) {
	Clock_Setup();
	GPIO_Setup();
	UART1_Setup();
	TIM2_Setup();
	EXTI3_Setup();
	enableInterrupts();

	_delay_ms(1000);
	Serial_print_string("MCU is Ready.\n");


	while (1) {
		// Main loop
	}
}